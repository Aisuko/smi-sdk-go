/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/deislabs/smi-sdk-go/pkg/apis/access/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterTrafficTargetLister helps list ClusterTrafficTargets.
type ClusterTrafficTargetLister interface {
	// List lists all ClusterTrafficTargets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterTrafficTarget, err error)
	// ClusterTrafficTargets returns an object that can list and get ClusterTrafficTargets.
	ClusterTrafficTargets(namespace string) ClusterTrafficTargetNamespaceLister
	ClusterTrafficTargetListerExpansion
}

// clusterTrafficTargetLister implements the ClusterTrafficTargetLister interface.
type clusterTrafficTargetLister struct {
	indexer cache.Indexer
}

// NewClusterTrafficTargetLister returns a new ClusterTrafficTargetLister.
func NewClusterTrafficTargetLister(indexer cache.Indexer) ClusterTrafficTargetLister {
	return &clusterTrafficTargetLister{indexer: indexer}
}

// List lists all ClusterTrafficTargets in the indexer.
func (s *clusterTrafficTargetLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterTrafficTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterTrafficTarget))
	})
	return ret, err
}

// ClusterTrafficTargets returns an object that can list and get ClusterTrafficTargets.
func (s *clusterTrafficTargetLister) ClusterTrafficTargets(namespace string) ClusterTrafficTargetNamespaceLister {
	return clusterTrafficTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterTrafficTargetNamespaceLister helps list and get ClusterTrafficTargets.
type ClusterTrafficTargetNamespaceLister interface {
	// List lists all ClusterTrafficTargets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterTrafficTarget, err error)
	// Get retrieves the ClusterTrafficTarget from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ClusterTrafficTarget, error)
	ClusterTrafficTargetNamespaceListerExpansion
}

// clusterTrafficTargetNamespaceLister implements the ClusterTrafficTargetNamespaceLister
// interface.
type clusterTrafficTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterTrafficTargets in the indexer for a given namespace.
func (s clusterTrafficTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterTrafficTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterTrafficTarget))
	})
	return ret, err
}

// Get retrieves the ClusterTrafficTarget from the indexer for a given namespace and name.
func (s clusterTrafficTargetNamespaceLister) Get(name string) (*v1alpha1.ClusterTrafficTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clustertraffictarget"), name)
	}
	return obj.(*v1alpha1.ClusterTrafficTarget), nil
}
