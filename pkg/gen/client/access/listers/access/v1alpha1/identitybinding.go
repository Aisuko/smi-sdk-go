/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/deislabs/smi-sdk-go/pkg/apis/access/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IdentityBindingLister helps list IdentityBindings.
type IdentityBindingLister interface {
	// List lists all IdentityBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.IdentityBinding, err error)
	// IdentityBindings returns an object that can list and get IdentityBindings.
	IdentityBindings(namespace string) IdentityBindingNamespaceLister
	IdentityBindingListerExpansion
}

// identityBindingLister implements the IdentityBindingLister interface.
type identityBindingLister struct {
	indexer cache.Indexer
}

// NewIdentityBindingLister returns a new IdentityBindingLister.
func NewIdentityBindingLister(indexer cache.Indexer) IdentityBindingLister {
	return &identityBindingLister{indexer: indexer}
}

// List lists all IdentityBindings in the indexer.
func (s *identityBindingLister) List(selector labels.Selector) (ret []*v1alpha1.IdentityBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IdentityBinding))
	})
	return ret, err
}

// IdentityBindings returns an object that can list and get IdentityBindings.
func (s *identityBindingLister) IdentityBindings(namespace string) IdentityBindingNamespaceLister {
	return identityBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IdentityBindingNamespaceLister helps list and get IdentityBindings.
type IdentityBindingNamespaceLister interface {
	// List lists all IdentityBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.IdentityBinding, err error)
	// Get retrieves the IdentityBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.IdentityBinding, error)
	IdentityBindingNamespaceListerExpansion
}

// identityBindingNamespaceLister implements the IdentityBindingNamespaceLister
// interface.
type identityBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IdentityBindings in the indexer for a given namespace.
func (s identityBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IdentityBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IdentityBinding))
	})
	return ret, err
}

// Get retrieves the IdentityBinding from the indexer for a given namespace and name.
func (s identityBindingNamespaceLister) Get(name string) (*v1alpha1.IdentityBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("identitybinding"), name)
	}
	return obj.(*v1alpha1.IdentityBinding), nil
}
