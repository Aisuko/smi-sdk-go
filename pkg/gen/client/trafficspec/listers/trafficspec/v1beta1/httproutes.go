/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/deislabs/smi-sdk-go/pkg/apis/trafficspec/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HTTPRoutesLister helps list HTTPRouteses.
type HTTPRoutesLister interface {
	// List lists all HTTPRouteses in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.HTTPRoutes, err error)
	// HTTPRouteses returns an object that can list and get HTTPRouteses.
	HTTPRouteses(namespace string) HTTPRoutesNamespaceLister
	HTTPRoutesListerExpansion
}

// hTTPRoutesLister implements the HTTPRoutesLister interface.
type hTTPRoutesLister struct {
	indexer cache.Indexer
}

// NewHTTPRoutesLister returns a new HTTPRoutesLister.
func NewHTTPRoutesLister(indexer cache.Indexer) HTTPRoutesLister {
	return &hTTPRoutesLister{indexer: indexer}
}

// List lists all HTTPRouteses in the indexer.
func (s *hTTPRoutesLister) List(selector labels.Selector) (ret []*v1beta1.HTTPRoutes, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.HTTPRoutes))
	})
	return ret, err
}

// HTTPRouteses returns an object that can list and get HTTPRouteses.
func (s *hTTPRoutesLister) HTTPRouteses(namespace string) HTTPRoutesNamespaceLister {
	return hTTPRoutesNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HTTPRoutesNamespaceLister helps list and get HTTPRouteses.
type HTTPRoutesNamespaceLister interface {
	// List lists all HTTPRouteses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.HTTPRoutes, err error)
	// Get retrieves the HTTPRoutes from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.HTTPRoutes, error)
	HTTPRoutesNamespaceListerExpansion
}

// hTTPRoutesNamespaceLister implements the HTTPRoutesNamespaceLister
// interface.
type hTTPRoutesNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HTTPRouteses in the indexer for a given namespace.
func (s hTTPRoutesNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.HTTPRoutes, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.HTTPRoutes))
	})
	return ret, err
}

// Get retrieves the HTTPRoutes from the indexer for a given namespace and name.
func (s hTTPRoutesNamespaceLister) Get(name string) (*v1beta1.HTTPRoutes, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("httproutes"), name)
	}
	return obj.(*v1beta1.HTTPRoutes), nil
}
